---
import Icon from "./Icon.astro"
import { AUTHOR } from "@consts"
---

<contact-link data-email={AUTHOR.EMAIL}>
  <template>
    <aside>
      <p>Want to get in touch?</p>
      <a href="" rel="nofollow">
        Send me a Email
        <Icon icon="paper-plane-tilt" size="1.2em" />
      </a>
    </aside>
  </template>
</contact-link>
<noscript><div id="contact-link-noscript"></div></noscript>

<script>
  class ContactLink extends HTMLElement {
    constructor() {
      super()
      // Inject HTML elements when JS runs
      this.appendChild(this.querySelector("template")!.content.cloneNode(true))
      // Add href to contact link
      const a = this.querySelector("a")
      const email = this.dataset.email
      if (a && email) {
        const events = ["focus", "mouseover", "touchstart"]
        const setEmailHref = (
          a: HTMLAnchorElement,
          encodedEmail: string = email,
        ) => {
          /* TODO: TypeScript says `atob()` is deprecated:
            "This function is only provided for compatibility with legacy web
            platform APIs and should never be used in new code, because they
            use strings to represent binary data and predate the introduction
            of typed arrays in JavaScript. For code running using Node.js APIs,
            converting between base64-encoded strings and binary data should be
            performed using `Buffer.from(str, 'base64')` and
            `buf.toString('base64')`."

            The change would be:
            const encodedEmailBuffer = Buffer.from(encodedEmail, "base64")
            const decodedEmail = encodedEmailBuffer.toString()

            The problem with this recommendation is that web browsers don't
            have the `Buffer` prototype. They do have `Window.atob()` though.
            https://developer.mozilla.org/en-US/docs/Glossary/Base64
          */
          // @ts-ignore
          const decodedEmail = atob(encodedEmail)
          a.setAttribute("href", `mailto:${decodedEmail}`)
        }
        events.forEach((e) => a.addEventListener(e, () => setEmailHref(a)))
      }
    }
  }
  customElements.define("contact-link", ContactLink)
</script>

<style>
  :root {
    --border-contact-link: 1px solid var(--gray-800);
  }

  a {
    background: var(--gradient-accent-orange);
    border-radius: 999rem;
    box-shadow: var(--shadow-md);
    color: var(--accent-text-over);
    display: flex;
    gap: 1rem;
    line-height: 1.1;
    max-width: fit-content;
    overflow: hidden;
    padding: 0.5rem 1rem;
    place-content: center;
    position: relative;
    text-align: center;
    text-decoration: none;
    white-space: nowrap;
  }

  aside {
    align-items: center;
    background-color: var(--gray-999_40);
    border-bottom: var(--border-contact-link);
    border-top: var(--border-contact-link);
    box-shadow: var(--shadow-sm);
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 2rem 0.5rem;
  }

  p {
    color: var(--gray-100);
    font-size: var(--text-lg);
    text-align: center;
    font-style: italic;
  }

  #contact-link-noscript {
    border-bottom: var(--border-contact-link);
  }

  @media (min-width: 50em) {
    a {
      font-size: var(--text-lg);
      padding: 1rem 2rem;
    }

    aside {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: space-between;
      padding: 5rem;
    }

    p {
      font-size: var(--text-2xl);
      text-align: left;
    }
  }

  a::after {
    content: "";
    inset: 0;
    mix-blend-mode: overlay;
    pointer-events: none;
    position: absolute;
    transition: background-color var(--theme-transition);
  }

  a:focus::after,
  a:hover::after {
    background-color: hsla(var(--gray-999-basis), 0.3);
  }
</style>
